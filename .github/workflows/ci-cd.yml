name: CI/CD Pipeline

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [main]

env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks get-token --cluster-name ${{ env.EKS_CLUSTER_NAME }} | aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    - name: Verify ArgoCD Installation
      run: |
        kubectl get pods -n argocd
        kubectl get application -n argocd

    - name: Update ArgoCD Application
      env:
        ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
      run: |
        kubectl patch application sample-app -n argocd --type=merge -p '{
          "spec": {
            "source": {
              "repoURL": "${{ github.server_url }}/${{ github.repository }}",
              "path": "k8s/$ENVIRONMENT",
              "targetRevision": "${{ github.sha }}"
            },
            "destination": {
              "server": "https://kubernetes.default.svc",
              "namespace": "$ENVIRONMENT"
            }
          }
        }'

    - name: Sync ArgoCD Application
      run: |
        kubectl patch application sample-app -n argocd --type=merge -p '{
          "operation": {
            "sync": {
              "revision": "${{ github.sha }}",
              "prune": true,
              "force": false
            }
          }
        }'

    - name: Wait for Sync to Complete
      run: |
        echo "Waiting for sync to complete..."
        for i in {1..30}; do
          sync_status=$(kubectl get application sample-app -n argocd -o jsonpath='{.status.sync.status}')
          health_status=$(kubectl get application sample-app -n argocd -o jsonpath='{.status.health.status}')
          echo "Sync Status: $sync_status, Health Status: $health_status"
          if [ "$sync_status" = "Synced" ] && [ "$health_status" = "Healthy" ]; then
            echo "Application synced and healthy"
            exit 0
          fi
          if [ "$i" -eq 30 ]; then
            echo "Timeout waiting for application to sync and become healthy"
            kubectl get application sample-app -n argocd -o yaml
            exit 1
          fi
          sleep 10
        done

    - name: Debug Information
      if: failure()
      run: |
        echo "Debug information:"
        kubectl get pods -n argocd
        kubectl get application sample-app -n argocd -o yaml
        kubectl logs -n argocd -l app.kubernetes.io/name=argocd-application-controller --tail=100
        kubectl describe application sample-app -n argocd
